
Embedded_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004284  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800449c  0800449c  00020470  2**0
                  CONTENTS
  4 .ARM          00000008  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a4  080044a4  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  080044ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020470  2**0
                  CONTENTS
 10 .bss          000008f8  20000470  20000470  00020470  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d68  20000d68  00020470  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eea8  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fc9  00000000  00000000  0002f38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c18  00000000  00000000  00031358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000967  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024ccc  00000000  00000000  000328d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e013  00000000  00000000  000575a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd401  00000000  00000000  000655b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003790  00000000  00000000  001429b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00146148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000470 	.word	0x20000470
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800441c 	.word	0x0800441c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000474 	.word	0x20000474
 80001ec:	0800441c 	.word	0x0800441c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <DWT_Delay_Init+0x58>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <DWT_Delay_Init+0x58>)
 80005a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005aa:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <DWT_Delay_Init+0x58>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <DWT_Delay_Init+0x58>)
 80005b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005b6:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005be:	f023 0301 	bic.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80005d6:	bf00      	nop
  __NOP();
 80005d8:	bf00      	nop
  __NOP();
 80005da:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <DWT_Delay_Init+0x5c>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <DWT_Delay_Init+0x4c>
  {
    return 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	e000      	b.n	80005ea <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80005e8:	2301      	movs	r3, #1
  }
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000edf0 	.word	0xe000edf0
 80005f8:	e0001000 	.word	0xe0001000

080005fc <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <DWT_Delay_us+0x40>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800060a:	f002 fc6b 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <DWT_Delay_us+0x44>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	0c9b      	lsrs	r3, r3, #18
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <DWT_Delay_us+0x40>)
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f8      	bcc.n	8000622 <DWT_Delay_us+0x26>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	431bde83 	.word	0x431bde83

08000644 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <lcd16x2_enablePulse+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <lcd16x2_enablePulse+0x38>)
 800064e:	8811      	ldrh	r1, [r2, #0]
 8000650:	2201      	movs	r2, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fea0 	bl	8002398 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000658:	2014      	movs	r0, #20
 800065a:	f7ff ffcf 	bl	80005fc <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <lcd16x2_enablePulse+0x34>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <lcd16x2_enablePulse+0x38>)
 8000664:	8811      	ldrh	r1, [r2, #0]
 8000666:	2200      	movs	r2, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fe95 	bl	8002398 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800066e:	203c      	movs	r0, #60	; 0x3c
 8000670:	f7ff ffc4 	bl	80005fc <DWT_Delay_us>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000048c 	.word	0x2000048c
 800067c:	20000492 	.word	0x20000492

08000680 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <lcd16x2_rs+0x24>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <lcd16x2_rs+0x28>)
 8000690:	8811      	ldrh	r1, [r2, #0]
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fe7f 	bl	8002398 <HAL_GPIO_WritePin>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000048c 	.word	0x2000048c
 80006a8:	20000490 	.word	0x20000490

080006ac <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	091b      	lsrs	r3, r3, #4
 80006c2:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80006c4:	4b5f      	ldr	r3, [pc, #380]	; (8000844 <lcd16x2_write+0x198>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d05a      	beq.n	8000782 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80006cc:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <lcd16x2_write+0x19c>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	4b5e      	ldr	r3, [pc, #376]	; (800084c <lcd16x2_write+0x1a0>)
 80006d2:	8819      	ldrh	r1, [r3, #0]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	f001 fe5b 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80006e2:	4b59      	ldr	r3, [pc, #356]	; (8000848 <lcd16x2_write+0x19c>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <lcd16x2_write+0x1a4>)
 80006e8:	8819      	ldrh	r1, [r3, #0]
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	f001 fe50 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80006f8:	4b53      	ldr	r3, [pc, #332]	; (8000848 <lcd16x2_write+0x19c>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4b55      	ldr	r3, [pc, #340]	; (8000854 <lcd16x2_write+0x1a8>)
 80006fe:	8819      	ldrh	r1, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	f001 fe45 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800070e:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <lcd16x2_write+0x19c>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <lcd16x2_write+0x1ac>)
 8000714:	8819      	ldrh	r1, [r3, #0]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	f001 fe3a 	bl	8002398 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000724:	4b4d      	ldr	r3, [pc, #308]	; (800085c <lcd16x2_write+0x1b0>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <lcd16x2_write+0x1b4>)
 800072a:	8819      	ldrh	r1, [r3, #0]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	f001 fe2f 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <lcd16x2_write+0x1b0>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	4b49      	ldr	r3, [pc, #292]	; (8000864 <lcd16x2_write+0x1b8>)
 8000740:	8819      	ldrh	r1, [r3, #0]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	f001 fe24 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <lcd16x2_write+0x1b0>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <lcd16x2_write+0x1bc>)
 8000756:	8819      	ldrh	r1, [r3, #0]
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	f001 fe19 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <lcd16x2_write+0x1b0>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	4b40      	ldr	r3, [pc, #256]	; (800086c <lcd16x2_write+0x1c0>)
 800076c:	8819      	ldrh	r1, [r3, #0]
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	f001 fe0e 	bl	8002398 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800077c:	f7ff ff62 	bl	8000644 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000780:	e05b      	b.n	800083a <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <lcd16x2_write+0x1b0>)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <lcd16x2_write+0x1b4>)
 8000788:	8819      	ldrh	r1, [r3, #0]
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	f001 fe00 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000798:	4b30      	ldr	r3, [pc, #192]	; (800085c <lcd16x2_write+0x1b0>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <lcd16x2_write+0x1b8>)
 800079e:	8819      	ldrh	r1, [r3, #0]
 80007a0:	7bbb      	ldrb	r3, [r7, #14]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	f001 fdf5 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <lcd16x2_write+0x1b0>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <lcd16x2_write+0x1bc>)
 80007b4:	8819      	ldrh	r1, [r3, #0]
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f001 fdea 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <lcd16x2_write+0x1b0>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <lcd16x2_write+0x1c0>)
 80007ca:	8819      	ldrh	r1, [r3, #0]
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	f001 fddf 	bl	8002398 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80007da:	f7ff ff33 	bl	8000644 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <lcd16x2_write+0x1b0>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <lcd16x2_write+0x1b4>)
 80007e4:	8819      	ldrh	r1, [r3, #0]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	f001 fdd2 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <lcd16x2_write+0x1b0>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <lcd16x2_write+0x1b8>)
 80007fa:	8819      	ldrh	r1, [r3, #0]
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	f001 fdc7 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <lcd16x2_write+0x1b0>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <lcd16x2_write+0x1bc>)
 8000810:	8819      	ldrh	r1, [r3, #0]
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	b2db      	uxtb	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	f001 fdbc 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <lcd16x2_write+0x1b0>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <lcd16x2_write+0x1c0>)
 8000826:	8819      	ldrh	r1, [r3, #0]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	f001 fdb1 	bl	8002398 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000836:	f7ff ff05 	bl	8000644 <lcd16x2_enablePulse>
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000
 8000848:	20000494 	.word	0x20000494
 800084c:	20000498 	.word	0x20000498
 8000850:	2000049a 	.word	0x2000049a
 8000854:	2000049c 	.word	0x2000049c
 8000858:	2000049e 	.word	0x2000049e
 800085c:	200004a0 	.word	0x200004a0
 8000860:	200004a4 	.word	0x200004a4
 8000864:	200004a6 	.word	0x200004a6
 8000868:	200004a8 	.word	0x200004a8
 800086c:	200004aa 	.word	0x200004aa

08000870 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ff00 	bl	8000680 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff12 	bl	80006ac <lcd16x2_write>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fef0 	bl	8000680 <lcd16x2_rs>
  lcd16x2_write(data);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff02 	bl	80006ac <lcd16x2_write>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 030f 	and.w	r3, r3, #15
 80008c0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fedc 	bl	8000680 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <lcd16x2_write4+0x7c>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <lcd16x2_write4+0x80>)
 80008ce:	8819      	ldrh	r1, [r3, #0]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	f001 fd5d 	bl	8002398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <lcd16x2_write4+0x7c>)
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <lcd16x2_write4+0x84>)
 80008e4:	8819      	ldrh	r1, [r3, #0]
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	f001 fd52 	bl	8002398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <lcd16x2_write4+0x7c>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <lcd16x2_write4+0x88>)
 80008fa:	8819      	ldrh	r1, [r3, #0]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	f001 fd47 	bl	8002398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <lcd16x2_write4+0x7c>)
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <lcd16x2_write4+0x8c>)
 8000910:	8819      	ldrh	r1, [r3, #0]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f001 fd3c 	bl	8002398 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000920:	f7ff fe90 	bl	8000644 <lcd16x2_enablePulse>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200004a0 	.word	0x200004a0
 8000930:	200004a4 	.word	0x200004a4
 8000934:	200004a6 	.word	0x200004a6
 8000938:	200004a8 	.word	0x200004a8
 800093c:	200004aa 	.word	0x200004aa

08000940 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	817b      	strh	r3, [r7, #10]
 800094e:	4613      	mov	r3, r2
 8000950:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000952:	f7ff fe23 	bl	800059c <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <lcd16x2_init_4bits+0xa8>)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 800095c:	4a23      	ldr	r2, [pc, #140]	; (80009ec <lcd16x2_init_4bits+0xac>)
 800095e:	897b      	ldrh	r3, [r7, #10]
 8000960:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <lcd16x2_init_4bits+0xb0>)
 8000964:	893b      	ldrh	r3, [r7, #8]
 8000966:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <lcd16x2_init_4bits+0xb4>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800096e:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <lcd16x2_init_4bits+0xb8>)
 8000970:	8b3b      	ldrh	r3, [r7, #24]
 8000972:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <lcd16x2_init_4bits+0xbc>)
 8000976:	8bbb      	ldrh	r3, [r7, #28]
 8000978:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <lcd16x2_init_4bits+0xc0>)
 800097c:	8c3b      	ldrh	r3, [r7, #32]
 800097e:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000980:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <lcd16x2_init_4bits+0xc4>)
 8000982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000984:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <lcd16x2_init_4bits+0xc8>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <lcd16x2_init_4bits+0xcc>)
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000992:	2014      	movs	r0, #20
 8000994:	f000 fede 	bl	8001754 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff ff89 	bl	80008b0 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f000 fed8 	bl	8001754 <HAL_Delay>
  lcd16x2_write4(0x3);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f7ff ff83 	bl	80008b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 fed2 	bl	8001754 <HAL_Delay>
  lcd16x2_write4(0x3);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f7ff ff7d 	bl	80008b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fecc 	bl	8001754 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff ff77 	bl	80008b0 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fec6 	bl	8001754 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	f7ff ff51 	bl	8000870 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f7ff ff4e 	bl	8000870 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff4b 	bl	8000870 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 feba 	bl	8001754 <HAL_Delay>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000048c 	.word	0x2000048c
 80009ec:	20000490 	.word	0x20000490
 80009f0:	20000492 	.word	0x20000492
 80009f4:	200004a0 	.word	0x200004a0
 80009f8:	200004a4 	.word	0x200004a4
 80009fc:	200004a6 	.word	0x200004a6
 8000a00:	200004a8 	.word	0x200004a8
 8000a04:	200004aa 	.word	0x200004aa
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000001 	.word	0x20000001

08000a10 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d108      	bne.n	8000a40 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a34:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff19 	bl	8000870 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8000a3e:	e007      	b.n	8000a50 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000a46:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff10 	bl	8000870 <lcd16x2_writeCommand>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff ff07 	bl	8000870 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000a62:	2003      	movs	r0, #3
 8000a64:	f000 fe76 	bl	8001754 <HAL_Delay>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8000a6c:	b40f      	push	{r0, r1, r2, r3}
 8000a6e:	b590      	push	{r4, r7, lr}
 8000a70:	b089      	sub	sp, #36	; 0x24
 8000a72:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a78:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 f83c 	bl	8003b00 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	77fb      	strb	r3, [r7, #31]
 8000a8c:	e00a      	b.n	8000aa4 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8000a8e:	7ffb      	ldrb	r3, [r7, #31]
 8000a90:	3320      	adds	r3, #32
 8000a92:	443b      	add	r3, r7
 8000a94:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fef9 	bl	8000890 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	7ffc      	ldrb	r4, [r7, #31]
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fba0 	bl	80001f0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	429c      	cmp	r4, r3
 8000ab4:	d202      	bcs.n	8000abc <lcd16x2_printf+0x50>
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d9e8      	bls.n	8000a8e <lcd16x2_printf+0x22>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3724      	adds	r7, #36	; 0x24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4770      	bx	lr
	...

08000acc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
//	}
//	return;



	cur_time = HAL_GetTick();
 8000ad6:	f000 fe31 	bl	800173c <HAL_GetTick>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000ae0:	601a      	str	r2, [r3, #0]
	int User_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	486d      	ldr	r0, [pc, #436]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000ae8:	f001 fc3e 	bl	8002368 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	617b      	str	r3, [r7, #20]
	int Ext_state = HAL_GPIO_ReadPin(Btn_GPIO_Port,Btn_Pin);
 8000af0:	2108      	movs	r1, #8
 8000af2:	486b      	ldr	r0, [pc, #428]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000af4:	f001 fc38 	bl	8002368 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	613b      	str	r3, [r7, #16]

	if(GPIO_Pin==USER_Btn_Pin){
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b02:	d16c      	bne.n	8000bde <HAL_GPIO_EXTI_Callback+0x112>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, User_state);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b0e:	4865      	ldr	r0, [pc, #404]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000b10:	f001 fc42 	bl	8002398 <HAL_GPIO_WritePin>
		if(User_state==0){
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d15c      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x108>
			if(cur_time-start_time>3000){
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b62      	ldr	r3, [pc, #392]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	dd03      	ble.n	8000b34 <HAL_GPIO_EXTI_Callback+0x68>
					state = 2;
 8000b2c:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	601a      	str	r2, [r3, #0]
			}


	}

}
 8000b32:	e0ac      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
			else if(cur_time-start_time>100 && state ==2){
 8000b34:	4b58      	ldr	r3, [pc, #352]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b5b      	ldr	r3, [pc, #364]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b64      	cmp	r3, #100	; 0x64
 8000b40:	f340 80a5 	ble.w	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
 8000b44:	4b59      	ldr	r3, [pc, #356]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	f040 80a0 	bne.w	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
				int len = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
				if(password[j]==1){
 8000b52:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d126      	bne.n	8000bae <HAL_GPIO_EXTI_Callback+0xe2>
					j++;
 8000b60:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a52      	ldr	r2, [pc, #328]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000b68:	6013      	str	r3, [r2, #0]
					len = strlen(user_pass_str);
 8000b6a:	4853      	ldr	r0, [pc, #332]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b6c:	f7ff fb40 	bl	80001f0 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	60bb      	str	r3, [r7, #8]
					user_pass_str[len]='1';
 8000b74:	4a50      	ldr	r2, [pc, #320]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	2231      	movs	r2, #49	; 0x31
 8000b7c:	701a      	strb	r2, [r3, #0]
					user_pass_str[len+1] = '\0';
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a4d      	ldr	r2, [pc, #308]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	54d1      	strb	r1, [r2, r3]
					if(j==4){
 8000b88:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d17e      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
						state=1;
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
						user_pass_str[len-j+1]='\0';
 8000b96:	4b46      	ldr	r3, [pc, #280]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	54d1      	strb	r1, [r2, r3]
						j=0;
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	e06f      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
					len = strlen(user_pass_str);
 8000bae:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000bb0:	f7ff fb1e 	bl	80001f0 <strlen>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60bb      	str	r3, [r7, #8]
					user_pass_str[len-j]='\0';
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	54d1      	strb	r1, [r2, r3]
					state=0;
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
					j=0;
 8000bcc:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	e05c      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
				start_time = cur_time;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	e057      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
		if(Ext_state==0 ){
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d150      	bne.n	8000c86 <HAL_GPIO_EXTI_Callback+0x1ba>
			if(User_state==0){
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d151      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
			if(cur_time-start_time>100 && state ==2){
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b64      	cmp	r3, #100	; 0x64
 8000bf6:	dd4a      	ble.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d146      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
				int len = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
				if(password[j]==0){
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d126      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x194>
						j++;
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c1a:	6013      	str	r3, [r2, #0]
						len = strlen(user_pass_str);
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c1e:	f7ff fae7 	bl	80001f0 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	60fb      	str	r3, [r7, #12]
						user_pass_str[len]='0';
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	2230      	movs	r2, #48	; 0x30
 8000c2e:	701a      	strb	r2, [r3, #0]
						user_pass_str[len+1] = '\0';
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	54d1      	strb	r1, [r2, r3]
						if(j==4){
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d125      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
							state=1;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
							user_pass_str[len-j+1]='\0';
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	54d1      	strb	r1, [r2, r3]
							j=0;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	e016      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
						len = strlen(user_pass_str);
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c62:	f7ff fac5 	bl	80001f0 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
						user_pass_str[len-j]='\0';
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	54d1      	strb	r1, [r2, r3]
						state=0;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
						j=0;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_EXTI_Callback+0x1c2>
				start_time = cur_time;
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000c08 	.word	0x20000c08
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	20000c0c 	.word	0x20000c0c
 8000cac:	20000c04 	.word	0x20000c04
 8000cb0:	20000c00 	.word	0x20000c00
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	20000014 	.word	0x20000014

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc2:	f000 fcd5 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc6:	f000 f871 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 f97f 	bl	8000fcc <MX_GPIO_Init>
  MX_ETH_Init();
 8000cce:	f000 f8d7 	bl	8000e80 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000cd2:	f000 f923 	bl	8000f1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cd6:	f000 f94b 	bl	8000f70 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  lcd16x2_init_4bits(GPIOC, RS_Pin, E_Pin,
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	9303      	str	r3, [sp, #12]
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <main+0xd0>)
 8000cec:	2208      	movs	r2, #8
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4827      	ldr	r0, [pc, #156]	; (8000d90 <main+0xd4>)
 8000cf2:	f7ff fe25 	bl	8000940 <lcd16x2_init_4bits>
		  GPIOD, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
  int i = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  i = HAL_GPIO_ReadPin(Ext_GPIO_Port, Ext_Pin);
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <main+0xd8>)
 8000cfe:	f001 fb33 	bl	8002368 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	607b      	str	r3, [r7, #4]
	  if(i!=0){
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <main+0x5a>
		  state=1;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0xdc>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
		  i=0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
	  }
	  if(state==1){
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <main+0xdc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d113      	bne.n	8000d46 <main+0x8a>
		  lcd16x2_setCursor(0,0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe75 	bl	8000a10 <lcd16x2_setCursor>
		  lcd16x2_clear();
 8000d26:	f7ff fe97 	bl	8000a58 <lcd16x2_clear>
		  lcd16x2_printf("Approved!!");
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <main+0xe0>)
 8000d2c:	f7ff fe9e 	bl	8000a6c <lcd16x2_printf>
		  HAL_Delay(5000);
 8000d30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d34:	f000 fd0e 	bl	8001754 <HAL_Delay>
		  j=0;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <main+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
		  state=0;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <main+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e7d9      	b.n	8000cfa <main+0x3e>


	  }else if(state==0){
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <main+0xdc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <main+0xae>
		  lcd16x2_setCursor(0,0);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fe5d 	bl	8000a10 <lcd16x2_setCursor>
		  lcd16x2_clear();
 8000d56:	f7ff fe7f 	bl	8000a58 <lcd16x2_clear>
		  lcd16x2_printf("Access Denied");
 8000d5a:	4812      	ldr	r0, [pc, #72]	; (8000da4 <main+0xe8>)
 8000d5c:	f7ff fe86 	bl	8000a6c <lcd16x2_printf>
		  HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f000 fcf6 	bl	8001754 <HAL_Delay>
 8000d68:	e7c7      	b.n	8000cfa <main+0x3e>
//		  if(i!=0){
//			  lcd16x2_printf("Approved!!");
//			  HAL_Delay(5000);
//			  i=0;
		  }
	  else if(state==2){
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <main+0xdc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d1c3      	bne.n	8000cfa <main+0x3e>
		  lcd16x2_setCursor(0,0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fe4b 	bl	8000a10 <lcd16x2_setCursor>
		  lcd16x2_clear();
 8000d7a:	f7ff fe6d 	bl	8000a58 <lcd16x2_clear>
		  lcd16x2_printf(user_pass_str);
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <main+0xec>)
 8000d80:	f7ff fe74 	bl	8000a6c <lcd16x2_printf>
		  HAL_Delay(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 fce5 	bl	8001754 <HAL_Delay>
	  i = HAL_GPIO_ReadPin(Ext_GPIO_Port, Ext_Pin);
 8000d8a:	e7b6      	b.n	8000cfa <main+0x3e>
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	20000c04 	.word	0x20000c04
 8000d9c:	08004434 	.word	0x08004434
 8000da0:	20000c00 	.word	0x20000c00
 8000da4:	08004440 	.word	0x08004440
 8000da8:	20000014 	.word	0x20000014

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	; 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	; 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 feaa 	bl	8003b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <SystemClock_Config+0xcc>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <SystemClock_Config+0xcc>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <SystemClock_Config+0xd0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <SystemClock_Config+0xd0>)
 8000df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e20:	23a8      	movs	r3, #168	; 0xa8
 8000e22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fbf3 	bl	800261c <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e3c:	f000 f9d6 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fe54 	bl	8002b0c <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e6a:	f000 f9bf 	bl	80011ec <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ETH_Init+0x84>)
 8000e86:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <MX_ETH_Init+0x88>)
 8000e88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000e98:	22e1      	movs	r2, #225	; 0xe1
 8000e9a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_ETH_Init+0x84>)
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_ETH_Init+0x8c>)
 8000eb2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ETH_Init+0x84>)
 8000eb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000eba:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_ETH_Init+0x84>)
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <MX_ETH_Init+0x90>)
 8000ec0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_ETH_Init+0x84>)
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <MX_ETH_Init+0x94>)
 8000ec6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_ETH_Init+0x84>)
 8000eca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ece:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_ETH_Init+0x84>)
 8000ed2:	f000 fd75 	bl	80019c0 <HAL_ETH_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 f986 	bl	80011ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ee0:	2238      	movs	r2, #56	; 0x38
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_ETH_Init+0x98>)
 8000ee6:	f002 fe15 	bl	8003b14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_ETH_Init+0x98>)
 8000eec:	2221      	movs	r2, #33	; 0x21
 8000eee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_ETH_Init+0x98>)
 8000ef2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ef6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_ETH_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000624 	.word	0x20000624
 8000f08:	40028000 	.word	0x40028000
 8000f0c:	20000c10 	.word	0x20000c10
 8000f10:	20000584 	.word	0x20000584
 8000f14:	200004e4 	.word	0x200004e4
 8000f18:	200004ac 	.word	0x200004ac

08000f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART3_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f54:	f001 fffa 	bl	8002f4c <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f945 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200006d4 	.word	0x200006d4
 8000f6c:	40004800 	.word	0x40004800

08000f70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	f001 fa22 	bl	80023fc <HAL_PCD_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f915 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000071c 	.word	0x2000071c

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b7a      	ldr	r3, [pc, #488]	; (80011d0 <MX_GPIO_Init+0x204>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a79      	ldr	r2, [pc, #484]	; (80011d0 <MX_GPIO_Init+0x204>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b77      	ldr	r3, [pc, #476]	; (80011d0 <MX_GPIO_Init+0x204>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a72      	ldr	r2, [pc, #456]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a6b      	ldr	r2, [pc, #428]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <MX_GPIO_Init+0x204>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <MX_GPIO_Init+0x204>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a5d      	ldr	r2, [pc, #372]	; (80011d0 <MX_GPIO_Init+0x204>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a4f      	ldr	r2, [pc, #316]	; (80011d0 <MX_GPIO_Init+0x204>)
 8001094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <MX_GPIO_Init+0x204>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|E_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2109      	movs	r1, #9
 80010aa:	484a      	ldr	r0, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x208>)
 80010ac:	f001 f974 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f244 0181 	movw	r1, #16513	; 0x4081
 80010b6:	4848      	ldr	r0, [pc, #288]	; (80011d8 <MX_GPIO_Init+0x20c>)
 80010b8:	f001 f96e 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4846      	ldr	r0, [pc, #280]	; (80011dc <MX_GPIO_Init+0x210>)
 80010c2:	f001 f969 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	21f0      	movs	r1, #240	; 0xf0
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <MX_GPIO_Init+0x214>)
 80010cc:	f001 f964 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	483b      	ldr	r0, [pc, #236]	; (80011d4 <MX_GPIO_Init+0x208>)
 80010e8:	f000 ff92 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 80010ec:	2308      	movs	r3, #8
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010f0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4838      	ldr	r0, [pc, #224]	; (80011e4 <MX_GPIO_Init+0x218>)
 8001102:	f000 ff85 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8001106:	2309      	movs	r3, #9
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	482d      	ldr	r0, [pc, #180]	; (80011d4 <MX_GPIO_Init+0x208>)
 800111e:	f000 ff77 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ext_Pin */
  GPIO_InitStruct.Pin = Ext_Pin;
 8001122:	2308      	movs	r3, #8
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112a:	2302      	movs	r3, #2
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Ext_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x21c>)
 8001136:	f000 ff6b 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800113a:	f244 0381 	movw	r3, #16513	; 0x4081
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <MX_GPIO_Init+0x20c>)
 8001154:	f000 ff5c 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001158:	2340      	movs	r3, #64	; 0x40
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	481b      	ldr	r0, [pc, #108]	; (80011dc <MX_GPIO_Init+0x210>)
 8001170:	f000 ff4e 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <MX_GPIO_Init+0x210>)
 8001188:	f000 ff42 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 800118c:	23f0      	movs	r3, #240	; 0xf0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_GPIO_Init+0x214>)
 80011a4:	f000 ff34 	bl	8002010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2009      	movs	r0, #9
 80011ae:	f000 fbd0 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011b2:	2009      	movs	r0, #9
 80011b4:	f000 fbe9 	bl	800198a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f000 fbc8 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f000 fbe1 	bl	800198a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40020000 	.word	0x40020000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a55      	ldr	r2, [pc, #340]	; (80013bc <HAL_ETH_MspInit+0x174>)
 8001266:	4293      	cmp	r3, r2
 8001268:	f040 80a4 	bne.w	80013b4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 8001276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 8001292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a36      	ldr	r2, [pc, #216]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 800131e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_ETH_MspInit+0x178>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001330:	2332      	movs	r3, #50	; 0x32
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001340:	230b      	movs	r3, #11
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	481e      	ldr	r0, [pc, #120]	; (80013c4 <HAL_ETH_MspInit+0x17c>)
 800134c:	f000 fe60 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001350:	2386      	movs	r3, #134	; 0x86
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001360:	230b      	movs	r3, #11
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	4817      	ldr	r0, [pc, #92]	; (80013c8 <HAL_ETH_MspInit+0x180>)
 800136c:	f000 fe50 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001382:	230b      	movs	r3, #11
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <HAL_ETH_MspInit+0x184>)
 800138e:	f000 fe3f 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001392:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a4:	230b      	movs	r3, #11
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <HAL_ETH_MspInit+0x188>)
 80013b0:	f000 fe2e 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40028000 	.word	0x40028000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40021800 	.word	0x40021800

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_UART_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_UART_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_UART_MspInit+0x88>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_UART_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_UART_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_UART_MspInit+0x88>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800142e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_UART_MspInit+0x8c>)
 800144c:	f000 fde0 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004800 	.word	0x40004800
 800145c:	40023800 	.word	0x40023800
 8001460:	40020c00 	.word	0x40020c00

08001464 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001484:	d13f      	bne.n	8001506 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_PCD_MspInit+0xac>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_PCD_MspInit+0xac>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_PCD_MspInit+0xac>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014b4:	230a      	movs	r3, #10
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <HAL_PCD_MspInit+0xb0>)
 80014c0:	f000 fda6 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_PCD_MspInit+0xb0>)
 80014da:	f000 fd99 	bl	8002010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_PCD_MspInit+0xac>)
 80014e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_PCD_MspInit+0xac>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6353      	str	r3, [r2, #52]	; 0x34
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_PCD_MspInit+0xac>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_PCD_MspInit+0xac>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_PCD_MspInit+0xac>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f8d6 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 8001570:	2008      	movs	r0, #8
 8001572:	f000 ff2b 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800157e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001582:	f000 ff23 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f002 fab2 	bl	8003b24 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20030000 	.word	0x20030000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000c18 	.word	0x20000c18
 80015f4:	20000d68 	.word	0x20000d68

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001620:	f7ff ffea 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001626:	490d      	ldr	r1, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800163c:	4c0a      	ldr	r4, [pc, #40]	; (8001668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164a:	f002 fa71 	bl	8003b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff fb35 	bl	8000cbc <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8001660:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 8001664:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8001668:	20000d68 	.word	0x20000d68

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fda8 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000414 	.word	0x20000414
 800170c:	2000041c 	.word	0x2000041c
 8001710:	20000418 	.word	0x20000418

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000041c 	.word	0x2000041c
 8001738:	20000c1c 	.word	0x20000c1c

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000c1c 	.word	0x20000c1c

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000041c 	.word	0x2000041c

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06c      	b.n	8001aac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d106      	bne.n	80019ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2223      	movs	r2, #35	; 0x23
 80019e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fc2f 	bl	8001248 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_ETH_Init+0xf4>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <HAL_ETH_Init+0xf4>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_ETH_Init+0xf4>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_ETH_Init+0xf8>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a2b      	ldr	r2, [pc, #172]	; (8001ab8 <HAL_ETH_Init+0xf8>)
 8001a0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a10:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_ETH_Init+0xf8>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <HAL_ETH_Init+0xf8>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_ETH_Init+0xf8>)
 8001a22:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3c:	f7ff fe7e 	bl	800173c <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a42:	e011      	b.n	8001a68 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a44:	f7ff fe7a 	bl	800173c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a52:	d909      	bls.n	8001a68 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	22e0      	movs	r2, #224	; 0xe0
 8001a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e021      	b.n	8001aac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e4      	bne.n	8001a44 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f958 	bl	8001d30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f9ff 	bl	8001e84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa55 	bl	8001f36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f9bd 	bl	8001e14 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40013800 	.word	0x40013800

08001abc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <ETH_SetMACConfig+0x15c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	7c1b      	ldrb	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <ETH_SetMACConfig+0x28>
 8001ade:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ae2:	e000      	b.n	8001ae6 <ETH_SetMACConfig+0x2a>
 8001ae4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7c5b      	ldrb	r3, [r3, #17]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetMACConfig+0x38>
 8001aee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af2:	e000      	b.n	8001af6 <ETH_SetMACConfig+0x3a>
 8001af4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001af6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001afc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7fdb      	ldrb	r3, [r3, #31]
 8001b02:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b04:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	7f92      	ldrb	r2, [r2, #30]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d102      	bne.n	8001b1a <ETH_SetMACConfig+0x5e>
 8001b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x60>
 8001b1a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b24:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d102      	bne.n	8001b44 <ETH_SetMACConfig+0x88>
 8001b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b42:	e000      	b.n	8001b46 <ETH_SetMACConfig+0x8a>
 8001b44:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7bdb      	ldrb	r3, [r3, #15]
 8001b4c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b4e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fdec 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d101      	bne.n	8001baa <ETH_SetMACConfig+0xee>
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0xf0>
 8001baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d101      	bne.n	8001bc2 <ETH_SetMACConfig+0x106>
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	e000      	b.n	8001bc4 <ETH_SetMACConfig+0x108>
 8001bc2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001bc4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001bcc:	2a01      	cmp	r2, #1
 8001bce:	d101      	bne.n	8001bd4 <ETH_SetMACConfig+0x118>
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	e000      	b.n	8001bd6 <ETH_SetMACConfig+0x11a>
 8001bd4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001bde:	2a01      	cmp	r2, #1
 8001be0:	d101      	bne.n	8001be6 <ETH_SetMACConfig+0x12a>
 8001be2:	2202      	movs	r2, #2
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0x12c>
 8001be6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fda7 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	ff20810f 	.word	0xff20810f

08001c1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <ETH_SetDMAConfig+0x110>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7b1b      	ldrb	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <ETH_SetDMAConfig+0x2c>
 8001c42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c46:	e000      	b.n	8001c4a <ETH_SetDMAConfig+0x2e>
 8001c48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	7b5b      	ldrb	r3, [r3, #13]
 8001c4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	7f52      	ldrb	r2, [r2, #29]
 8001c56:	2a00      	cmp	r2, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetDMAConfig+0x44>
 8001c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetDMAConfig+0x46>
 8001c60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7b9b      	ldrb	r3, [r3, #14]
 8001c68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7f1b      	ldrb	r3, [r3, #28]
 8001c76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	7f9b      	ldrb	r3, [r3, #30]
 8001c7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fd4e 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cd0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001cd6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cdc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ce4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ce6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cf4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff fd1f 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f8de3f23 	.word	0xf8de3f23

08001d30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a6      	sub	sp, #152	; 0x98
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001da4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fe86 	bl	8001abc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001db4:	2301      	movs	r3, #1
 8001db6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff08 	bl	8001c1c <ETH_SetDMAConfig>
}
 8001e0c:	bf00      	nop
 8001e0e:	3798      	adds	r7, #152	; 0x98
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3305      	adds	r3, #5
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	3204      	adds	r2, #4
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <ETH_MACAddressConfig+0x68>)
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3303      	adds	r3, #3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	061a      	lsls	r2, r3, #24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <ETH_MACAddressConfig+0x6c>)
 8001e66:	4413      	add	r3, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40028040 	.word	0x40028040
 8001e80:	40028044 	.word	0x40028044

08001e84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e03e      	b.n	8001f10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	3206      	adds	r2, #6
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d80c      	bhi.n	8001ef4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68d9      	ldr	r1, [r3, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e004      	b.n	8001efe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d9bd      	bls.n	8001e92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f28:	611a      	str	r2, [r3, #16]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e046      	b.n	8001fd2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f88:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	3212      	adds	r2, #18
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d80c      	bhi.n	8001fc2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6919      	ldr	r1, [r3, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	e004      	b.n	8001fcc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d9b5      	bls.n	8001f44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	60da      	str	r2, [r3, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e177      	b.n	800231c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 8166 	bne.w	8002316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	2b02      	cmp	r3, #2
 8002060:	d130      	bne.n	80020c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 0201 	and.w	r2, r3, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d017      	beq.n	8002100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d123      	bne.n	8002154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80c0 	beq.w	8002316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_GPIO_Init+0x324>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a65      	ldr	r2, [pc, #404]	; (8002334 <HAL_GPIO_Init+0x324>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_GPIO_Init+0x324>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b2:	4a61      	ldr	r2, [pc, #388]	; (8002338 <HAL_GPIO_Init+0x328>)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x32c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d037      	beq.n	800224e <HAL_GPIO_Init+0x23e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a57      	ldr	r2, [pc, #348]	; (8002340 <HAL_GPIO_Init+0x330>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d031      	beq.n	800224a <HAL_GPIO_Init+0x23a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_GPIO_Init+0x334>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02b      	beq.n	8002246 <HAL_GPIO_Init+0x236>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a55      	ldr	r2, [pc, #340]	; (8002348 <HAL_GPIO_Init+0x338>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d025      	beq.n	8002242 <HAL_GPIO_Init+0x232>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a54      	ldr	r2, [pc, #336]	; (800234c <HAL_GPIO_Init+0x33c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01f      	beq.n	800223e <HAL_GPIO_Init+0x22e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a53      	ldr	r2, [pc, #332]	; (8002350 <HAL_GPIO_Init+0x340>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x22a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_GPIO_Init+0x344>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_GPIO_Init+0x348>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_GPIO_Init+0x34c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x350>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x21a>
 8002226:	2309      	movs	r3, #9
 8002228:	e012      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800222a:	230a      	movs	r3, #10
 800222c:	e010      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800222e:	2308      	movs	r3, #8
 8002230:	e00e      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002232:	2307      	movs	r3, #7
 8002234:	e00c      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002236:	2306      	movs	r3, #6
 8002238:	e00a      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800223a:	2305      	movs	r3, #5
 800223c:	e008      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800223e:	2304      	movs	r3, #4
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002242:	2303      	movs	r3, #3
 8002244:	e004      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002246:	2302      	movs	r3, #2
 8002248:	e002      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800224e:	2300      	movs	r3, #0
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f002 0203 	and.w	r2, r2, #3
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	4093      	lsls	r3, r2
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002260:	4935      	ldr	r1, [pc, #212]	; (8002338 <HAL_GPIO_Init+0x328>)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x354>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_GPIO_Init+0x354>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_GPIO_Init+0x354>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022bc:	4a29      	ldr	r2, [pc, #164]	; (8002364 <HAL_GPIO_Init+0x354>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c2:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_GPIO_Init+0x354>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_GPIO_Init+0x354>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_GPIO_Init+0x354>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_GPIO_Init+0x354>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	f67f ae84 	bls.w	800202c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40013800 	.word	0x40013800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020800 	.word	0x40020800
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40021400 	.word	0x40021400
 8002354:	40021800 	.word	0x40021800
 8002358:	40021c00 	.word	0x40021c00
 800235c:	40022000 	.word	0x40022000
 8002360:	40022400 	.word	0x40022400
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e001      	b.n	800238a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fb6e 	bl	8000acc <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e101      	b.n	8002612 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff f81b 	bl	8001464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800243c:	d102      	bne.n	8002444 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f8a7 	bl	800359c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7c1a      	ldrb	r2, [r3, #16]
 8002456:	f88d 2000 	strb.w	r2, [sp]
 800245a:	3304      	adds	r3, #4
 800245c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245e:	f001 f839 	bl	80034d4 <USB_CoreInit>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0ce      	b.n	8002612 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f001 f89f 	bl	80035be <USB_SetCurrentMode>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0bf      	b.n	8002612 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e04a      	b.n	800252e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3315      	adds	r3, #21
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3314      	adds	r3, #20
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	b298      	uxth	r0, r3
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	332e      	adds	r3, #46	; 0x2e
 80024d4:	4602      	mov	r2, r0
 80024d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3318      	adds	r3, #24
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	331c      	adds	r3, #28
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3320      	adds	r3, #32
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3324      	adds	r3, #36	; 0x24
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	791b      	ldrb	r3, [r3, #4]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	429a      	cmp	r2, r3
 8002536:	d3af      	bcc.n	8002498 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e044      	b.n	80025c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	3301      	adds	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3b5      	bcc.n	800253e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7c1a      	ldrb	r2, [r3, #16]
 80025da:	f88d 2000 	strb.w	r2, [sp]
 80025de:	3304      	adds	r3, #4
 80025e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e2:	f001 f839 	bl	8003658 <USB_DevInit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00c      	b.n	8002612 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fa01 	bl	8003a12 <USB_DevDisconnect>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e267      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00c      	beq.n	8002660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d112      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05b      	beq.n	8002724 <HAL_RCC_OscConfig+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e242      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x74>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f832 	bl	800173c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f82e 	bl	800173c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e207      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff f81e 	bl	800173c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff f81a 	bl	800173c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1f3      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0xe8>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11c      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1c7      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	e03a      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe ffd3 	bl	800173c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe ffcf 	bl	800173c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1a8      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4925      	ldr	r1, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe ffb2 	bl	800173c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe ffae 	bl	800173c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e187      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe ff92 	bl	800173c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe ff8e 	bl	800173c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e167      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x200>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe ff7b 	bl	800173c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	e00e      	b.n	8002868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe ff77 	bl	800173c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e150      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ea      	bne.n	800284a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8097 	beq.w	80029b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe ff37 	bl	800173c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe ff33 	bl	800173c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e10c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x2ea>
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fef8 	bl	800173c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fef4 	bl	800173c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0cb      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ee      	beq.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe fee2 	bl	800173c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fede 	bl	800173c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0b5      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ee      	bne.n	800297c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a1 	beq.w	8002afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d05c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d141      	bne.n	8002a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe feb2 	bl	800173c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe feae 	bl	800173c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e087      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fe87 	bl	800173c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fe83 	bl	800173c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x416>
 8002a50:	e054      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fe70 	bl	800173c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fe6c 	bl	800173c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e045      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e038      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4ec>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fd9e 	bl	800173c <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fd9a 	bl	800173c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fcfe 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08004450 	.word	0x08004450
 8002cd0:	20000414 	.word	0x20000414
 8002cd4:	20000418 	.word	0x20000418

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	; 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de8:	f7fd fa5a 	bl	80002a0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd fa00 	bl	80002a0 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000414 	.word	0x20000414

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08004460 	.word	0x08004460

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffdc 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08004460 	.word	0x08004460

08002f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e042      	b.n	8002fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fa2e 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f82b 	bl	8002fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0c0      	sub	sp, #256	; 0x100
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	ea40 0301 	orr.w	r3, r0, r1
 8003014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	431a      	orrs	r2, r3
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003044:	f021 010c 	bic.w	r1, r1, #12
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003052:	430b      	orrs	r3, r1
 8003054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	6999      	ldr	r1, [r3, #24]
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	ea40 0301 	orr.w	r3, r0, r1
 8003072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <UART_SetConfig+0x2cc>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d005      	beq.n	800308c <UART_SetConfig+0xa0>
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <UART_SetConfig+0x2d0>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d104      	bne.n	8003096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800308c:	f7ff ff4a 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003094:	e003      	b.n	800309e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003096:	f7ff ff31 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 800309a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	f040 810c 	bne.w	80032c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030c6:	415b      	adcs	r3, r3
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ce:	4621      	mov	r1, r4
 80030d0:	eb12 0801 	adds.w	r8, r2, r1
 80030d4:	4629      	mov	r1, r5
 80030d6:	eb43 0901 	adc.w	r9, r3, r1
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	eb18 0303 	adds.w	r3, r8, r3
 80030f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030fc:	462b      	mov	r3, r5
 80030fe:	eb49 0303 	adc.w	r3, r9, r3
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800311a:	460b      	mov	r3, r1
 800311c:	18db      	adds	r3, r3, r3
 800311e:	653b      	str	r3, [r7, #80]	; 0x50
 8003120:	4613      	mov	r3, r2
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	657b      	str	r3, [r7, #84]	; 0x54
 8003128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800312c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003130:	f7fd f8b6 	bl	80002a0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <UART_SetConfig+0x2d4>)
 800313a:	fba3 2302 	umull	r2, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	011c      	lsls	r4, r3, #4
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800314c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	1891      	adds	r1, r2, r2
 800315a:	64b9      	str	r1, [r7, #72]	; 0x48
 800315c:	415b      	adcs	r3, r3
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003164:	4641      	mov	r1, r8
 8003166:	eb12 0a01 	adds.w	sl, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0b01 	adc.w	fp, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800317c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003184:	4692      	mov	sl, r2
 8003186:	469b      	mov	fp, r3
 8003188:	4643      	mov	r3, r8
 800318a:	eb1a 0303 	adds.w	r3, sl, r3
 800318e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003192:	464b      	mov	r3, r9
 8003194:	eb4b 0303 	adc.w	r3, fp, r3
 8003198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031b0:	460b      	mov	r3, r1
 80031b2:	18db      	adds	r3, r3, r3
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
 80031b6:	4613      	mov	r3, r2
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031c6:	f7fd f86b 	bl	80002a0 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <UART_SetConfig+0x2d4>)
 80031d2:	fba3 2301 	umull	r2, r3, r3, r1
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2264      	movs	r2, #100	; 0x64
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	1acb      	subs	r3, r1, r3
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <UART_SetConfig+0x2d4>)
 80031e8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f4:	441c      	add	r4, r3
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003210:	415b      	adcs	r3, r3
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003218:	4641      	mov	r1, r8
 800321a:	1851      	adds	r1, r2, r1
 800321c:	6339      	str	r1, [r7, #48]	; 0x30
 800321e:	4649      	mov	r1, r9
 8003220:	414b      	adcs	r3, r1
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003230:	4659      	mov	r1, fp
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4651      	mov	r1, sl
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4651      	mov	r1, sl
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4642      	mov	r2, r8
 8003246:	189b      	adds	r3, r3, r2
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800324c:	464b      	mov	r3, r9
 800324e:	460a      	mov	r2, r1
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003282:	f7fd f80d 	bl	80002a0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <UART_SetConfig+0x2d4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	; 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3332      	adds	r3, #50	; 0x32
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <UART_SetConfig+0x2d4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4422      	add	r2, r4
 80032b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b4:	e106      	b.n	80034c4 <UART_SetConfig+0x4d8>
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	6239      	str	r1, [r7, #32]
 80032de:	415b      	adcs	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032e6:	4641      	mov	r1, r8
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb43 0501 	adc.w	r5, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	00eb      	lsls	r3, r5, #3
 80032fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fe:	00e2      	lsls	r2, r4, #3
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	4643      	mov	r3, r8
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800330c:	464b      	mov	r3, r9
 800330e:	eb45 0303 	adc.w	r3, r5, r3
 8003312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003332:	4629      	mov	r1, r5
 8003334:	008b      	lsls	r3, r1, #2
 8003336:	4621      	mov	r1, r4
 8003338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333c:	4621      	mov	r1, r4
 800333e:	008a      	lsls	r2, r1, #2
 8003340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003344:	f7fc ffac 	bl	80002a0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <UART_SetConfig+0x4e4>)
 800334e:	fba3 2302 	umull	r2, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	011c      	lsls	r4, r3, #4
 8003356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	1891      	adds	r1, r2, r2
 800336e:	61b9      	str	r1, [r7, #24]
 8003370:	415b      	adcs	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	4641      	mov	r1, r8
 800337a:	1851      	adds	r1, r2, r1
 800337c:	6139      	str	r1, [r7, #16]
 800337e:	4649      	mov	r1, r9
 8003380:	414b      	adcs	r3, r1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003390:	4659      	mov	r1, fp
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4651      	mov	r1, sl
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4651      	mov	r1, sl
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4642      	mov	r2, r8
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ac:	464b      	mov	r3, r9
 80033ae:	460a      	mov	r2, r1
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033d0:	4649      	mov	r1, r9
 80033d2:	008b      	lsls	r3, r1, #2
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033da:	4641      	mov	r1, r8
 80033dc:	008a      	lsls	r2, r1, #2
 80033de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033e2:	f7fc ff5d 	bl	80002a0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 2301 	umull	r2, r3, r3, r1
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2264      	movs	r2, #100	; 0x64
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	1acb      	subs	r3, r1, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a33      	ldr	r2, [pc, #204]	; (80034d0 <UART_SetConfig+0x4e4>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340c:	441c      	add	r4, r3
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	673b      	str	r3, [r7, #112]	; 0x70
 8003416:	677a      	str	r2, [r7, #116]	; 0x74
 8003418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	1891      	adds	r1, r2, r2
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	415b      	adcs	r3, r3
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342c:	4641      	mov	r1, r8
 800342e:	1851      	adds	r1, r2, r1
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	4649      	mov	r1, r9
 8003434:	414b      	adcs	r3, r1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003444:	4659      	mov	r1, fp
 8003446:	00cb      	lsls	r3, r1, #3
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344e:	4651      	mov	r1, sl
 8003450:	00ca      	lsls	r2, r1, #3
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	4603      	mov	r3, r0
 8003458:	4642      	mov	r2, r8
 800345a:	189b      	adds	r3, r3, r2
 800345c:	66bb      	str	r3, [r7, #104]	; 0x68
 800345e:	464b      	mov	r3, r9
 8003460:	460a      	mov	r2, r1
 8003462:	eb42 0303 	adc.w	r3, r2, r3
 8003466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	667a      	str	r2, [r7, #100]	; 0x64
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003480:	4649      	mov	r1, r9
 8003482:	008b      	lsls	r3, r1, #2
 8003484:	4641      	mov	r1, r8
 8003486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348a:	4641      	mov	r1, r8
 800348c:	008a      	lsls	r2, r1, #2
 800348e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003492:	f7fc ff05 	bl	80002a0 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <UART_SetConfig+0x4e4>)
 800349c:	fba3 1302 	umull	r1, r3, r3, r2
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	2164      	movs	r1, #100	; 0x64
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	3332      	adds	r3, #50	; 0x32
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <UART_SetConfig+0x4e4>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4422      	add	r2, r4
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d4:	b084      	sub	sp, #16
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	f107 001c 	add.w	r0, r7, #28
 80034e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d123      	bne.n	8003536 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 faa0 	bl	8003a70 <USB_CoreReset>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e01b      	b.n	800356e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa94 	bl	8003a70 <USB_CoreReset>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800354c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
 8003560:	e005      	b.n	800356e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800356e:	7fbb      	ldrb	r3, [r7, #30]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10b      	bne.n	800358c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f043 0206 	orr.w	r2, r3, #6
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr

0800359c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 0201 	bic.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d115      	bne.n	800360c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80035ec:	200a      	movs	r0, #10
 80035ee:	f7fe f8b1 	bl	8001754 <HAL_Delay>
      ms += 10U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	330a      	adds	r3, #10
 80035f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa2b 	bl	8003a54 <USB_GetMode>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d01e      	beq.n	8003642 <USB_SetCurrentMode+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2bc7      	cmp	r3, #199	; 0xc7
 8003608:	d9f0      	bls.n	80035ec <USB_SetCurrentMode+0x2e>
 800360a:	e01a      	b.n	8003642 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800361e:	200a      	movs	r0, #10
 8003620:	f7fe f898 	bl	8001754 <HAL_Delay>
      ms += 10U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	330a      	adds	r3, #10
 8003628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa12 	bl	8003a54 <USB_GetMode>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <USB_SetCurrentMode+0x84>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2bc7      	cmp	r3, #199	; 0xc7
 800363a:	d9f0      	bls.n	800361e <USB_SetCurrentMode+0x60>
 800363c:	e001      	b.n	8003642 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e005      	b.n	800364e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2bc8      	cmp	r3, #200	; 0xc8
 8003646:	d101      	bne.n	800364c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003658:	b084      	sub	sp, #16
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e009      	b.n	800368c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3340      	adds	r3, #64	; 0x40
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	2200      	movs	r2, #0
 8003684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3301      	adds	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0e      	cmp	r3, #14
 8003690:	d9f2      	bls.n	8003678 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003692:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11c      	bne.n	80036d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
 80036d2:	e00b      	b.n	80036ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10d      	bne.n	800371c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003708:	2100      	movs	r1, #0
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f968 	bl	80039e0 <USB_SetDevSpeed>
 8003710:	e008      	b.n	8003724 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003712:	2101      	movs	r1, #1
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f963 	bl	80039e0 <USB_SetDevSpeed>
 800371a:	e003      	b.n	8003724 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800371c:	2103      	movs	r1, #3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f95e 	bl	80039e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003724:	2110      	movs	r1, #16
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8fa 	bl	8003920 <USB_FlushTxFifo>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f924 	bl	8003984 <USB_FlushRxFifo>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	461a      	mov	r2, r3
 800374e:	2300      	movs	r3, #0
 8003750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003758:	461a      	mov	r2, r3
 800375a:	2300      	movs	r3, #0
 800375c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003764:	461a      	mov	r2, r3
 8003766:	2300      	movs	r3, #0
 8003768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e043      	b.n	80037f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003786:	d118      	bne.n	80037ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e013      	b.n	80037cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e008      	b.n	80037cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	461a      	mov	r2, r3
 80037ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037fc:	461a      	mov	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4293      	cmp	r3, r2
 8003802:	d3b5      	bcc.n	8003770 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e043      	b.n	8003892 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003820:	d118      	bne.n	8003854 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e013      	b.n	8003866 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e008      	b.n	8003866 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	2300      	movs	r3, #0
 8003864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	2300      	movs	r3, #0
 8003876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800388a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3301      	adds	r3, #1
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003896:	461a      	mov	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4293      	cmp	r3, r2
 800389c:	d3b5      	bcc.n	800380a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <USB_DevInit+0x2c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f043 0208 	orr.w	r2, r3, #8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003918:	b004      	add	sp, #16
 800391a:	4770      	bx	lr
 800391c:	803c3800 	.word	0x803c3800

08003920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800393a:	d901      	bls.n	8003940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e01b      	b.n	8003978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	daf2      	bge.n	800392e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	019b      	lsls	r3, r3, #6
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003964:	d901      	bls.n	800396a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e006      	b.n	8003978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d0f0      	beq.n	8003958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800399c:	d901      	bls.n	80039a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e018      	b.n	80039d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	daf2      	bge.n	8003990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2210      	movs	r2, #16
 80039b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039c0:	d901      	bls.n	80039c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e006      	b.n	80039d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d0f0      	beq.n	80039b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0301 	and.w	r3, r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003a88:	d901      	bls.n	8003a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e01b      	b.n	8003ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	daf2      	bge.n	8003a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ab2:	d901      	bls.n	8003ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d0f0      	beq.n	8003aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <_vsiprintf_r>:
 8003ad4:	b500      	push	{lr}
 8003ad6:	b09b      	sub	sp, #108	; 0x6c
 8003ad8:	9100      	str	r1, [sp, #0]
 8003ada:	9104      	str	r1, [sp, #16]
 8003adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ae0:	9105      	str	r1, [sp, #20]
 8003ae2:	9102      	str	r1, [sp, #8]
 8003ae4:	4905      	ldr	r1, [pc, #20]	; (8003afc <_vsiprintf_r+0x28>)
 8003ae6:	9103      	str	r1, [sp, #12]
 8003ae8:	4669      	mov	r1, sp
 8003aea:	f000 f999 	bl	8003e20 <_svfiprintf_r>
 8003aee:	9b00      	ldr	r3, [sp, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	b01b      	add	sp, #108	; 0x6c
 8003af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003afa:	bf00      	nop
 8003afc:	ffff0208 	.word	0xffff0208

08003b00 <vsiprintf>:
 8003b00:	4613      	mov	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	4601      	mov	r1, r0
 8003b06:	4802      	ldr	r0, [pc, #8]	; (8003b10 <vsiprintf+0x10>)
 8003b08:	6800      	ldr	r0, [r0, #0]
 8003b0a:	f7ff bfe3 	b.w	8003ad4 <_vsiprintf_r>
 8003b0e:	bf00      	nop
 8003b10:	2000046c 	.word	0x2000046c

08003b14 <memset>:
 8003b14:	4402      	add	r2, r0
 8003b16:	4603      	mov	r3, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <__errno>:
 8003b24:	4b01      	ldr	r3, [pc, #4]	; (8003b2c <__errno+0x8>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000046c 	.word	0x2000046c

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4d0d      	ldr	r5, [pc, #52]	; (8003b68 <__libc_init_array+0x38>)
 8003b34:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <__libc_init_array+0x3c>)
 8003b36:	1b64      	subs	r4, r4, r5
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	42a6      	cmp	r6, r4
 8003b3e:	d109      	bne.n	8003b54 <__libc_init_array+0x24>
 8003b40:	4d0b      	ldr	r5, [pc, #44]	; (8003b70 <__libc_init_array+0x40>)
 8003b42:	4c0c      	ldr	r4, [pc, #48]	; (8003b74 <__libc_init_array+0x44>)
 8003b44:	f000 fc6a 	bl	800441c <_init>
 8003b48:	1b64      	subs	r4, r4, r5
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	42a6      	cmp	r6, r4
 8003b50:	d105      	bne.n	8003b5e <__libc_init_array+0x2e>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b58:	4798      	blx	r3
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	e7ee      	b.n	8003b3c <__libc_init_array+0xc>
 8003b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b62:	4798      	blx	r3
 8003b64:	3601      	adds	r6, #1
 8003b66:	e7f2      	b.n	8003b4e <__libc_init_array+0x1e>
 8003b68:	080044a4 	.word	0x080044a4
 8003b6c:	080044a4 	.word	0x080044a4
 8003b70:	080044a4 	.word	0x080044a4
 8003b74:	080044a8 	.word	0x080044a8

08003b78 <__retarget_lock_acquire_recursive>:
 8003b78:	4770      	bx	lr

08003b7a <__retarget_lock_release_recursive>:
 8003b7a:	4770      	bx	lr

08003b7c <_free_r>:
 8003b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	d044      	beq.n	8003c0c <_free_r+0x90>
 8003b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b86:	9001      	str	r0, [sp, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b8e:	bfb8      	it	lt
 8003b90:	18e4      	addlt	r4, r4, r3
 8003b92:	f000 f8df 	bl	8003d54 <__malloc_lock>
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <_free_r+0x94>)
 8003b98:	9801      	ldr	r0, [sp, #4]
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	b933      	cbnz	r3, 8003bac <_free_r+0x30>
 8003b9e:	6063      	str	r3, [r4, #4]
 8003ba0:	6014      	str	r4, [r2, #0]
 8003ba2:	b003      	add	sp, #12
 8003ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ba8:	f000 b8da 	b.w	8003d60 <__malloc_unlock>
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	d908      	bls.n	8003bc2 <_free_r+0x46>
 8003bb0:	6825      	ldr	r5, [r4, #0]
 8003bb2:	1961      	adds	r1, r4, r5
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	bf01      	itttt	eq
 8003bb8:	6819      	ldreq	r1, [r3, #0]
 8003bba:	685b      	ldreq	r3, [r3, #4]
 8003bbc:	1949      	addeq	r1, r1, r5
 8003bbe:	6021      	streq	r1, [r4, #0]
 8003bc0:	e7ed      	b.n	8003b9e <_free_r+0x22>
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b10b      	cbz	r3, 8003bcc <_free_r+0x50>
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	d9fa      	bls.n	8003bc2 <_free_r+0x46>
 8003bcc:	6811      	ldr	r1, [r2, #0]
 8003bce:	1855      	adds	r5, r2, r1
 8003bd0:	42a5      	cmp	r5, r4
 8003bd2:	d10b      	bne.n	8003bec <_free_r+0x70>
 8003bd4:	6824      	ldr	r4, [r4, #0]
 8003bd6:	4421      	add	r1, r4
 8003bd8:	1854      	adds	r4, r2, r1
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	d1e0      	bne.n	8003ba2 <_free_r+0x26>
 8003be0:	681c      	ldr	r4, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	6053      	str	r3, [r2, #4]
 8003be6:	440c      	add	r4, r1
 8003be8:	6014      	str	r4, [r2, #0]
 8003bea:	e7da      	b.n	8003ba2 <_free_r+0x26>
 8003bec:	d902      	bls.n	8003bf4 <_free_r+0x78>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	6003      	str	r3, [r0, #0]
 8003bf2:	e7d6      	b.n	8003ba2 <_free_r+0x26>
 8003bf4:	6825      	ldr	r5, [r4, #0]
 8003bf6:	1961      	adds	r1, r4, r5
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	bf04      	itt	eq
 8003bfc:	6819      	ldreq	r1, [r3, #0]
 8003bfe:	685b      	ldreq	r3, [r3, #4]
 8003c00:	6063      	str	r3, [r4, #4]
 8003c02:	bf04      	itt	eq
 8003c04:	1949      	addeq	r1, r1, r5
 8003c06:	6021      	streq	r1, [r4, #0]
 8003c08:	6054      	str	r4, [r2, #4]
 8003c0a:	e7ca      	b.n	8003ba2 <_free_r+0x26>
 8003c0c:	b003      	add	sp, #12
 8003c0e:	bd30      	pop	{r4, r5, pc}
 8003c10:	20000d60 	.word	0x20000d60

08003c14 <sbrk_aligned>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4e0e      	ldr	r6, [pc, #56]	; (8003c50 <sbrk_aligned+0x3c>)
 8003c18:	460c      	mov	r4, r1
 8003c1a:	6831      	ldr	r1, [r6, #0]
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	b911      	cbnz	r1, 8003c26 <sbrk_aligned+0x12>
 8003c20:	f000 fba6 	bl	8004370 <_sbrk_r>
 8003c24:	6030      	str	r0, [r6, #0]
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 fba1 	bl	8004370 <_sbrk_r>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	d00a      	beq.n	8003c48 <sbrk_aligned+0x34>
 8003c32:	1cc4      	adds	r4, r0, #3
 8003c34:	f024 0403 	bic.w	r4, r4, #3
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d007      	beq.n	8003c4c <sbrk_aligned+0x38>
 8003c3c:	1a21      	subs	r1, r4, r0
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 fb96 	bl	8004370 <_sbrk_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d101      	bne.n	8003c4c <sbrk_aligned+0x38>
 8003c48:	f04f 34ff 	mov.w	r4, #4294967295
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	20000d64 	.word	0x20000d64

08003c54 <_malloc_r>:
 8003c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c58:	1ccd      	adds	r5, r1, #3
 8003c5a:	f025 0503 	bic.w	r5, r5, #3
 8003c5e:	3508      	adds	r5, #8
 8003c60:	2d0c      	cmp	r5, #12
 8003c62:	bf38      	it	cc
 8003c64:	250c      	movcc	r5, #12
 8003c66:	2d00      	cmp	r5, #0
 8003c68:	4607      	mov	r7, r0
 8003c6a:	db01      	blt.n	8003c70 <_malloc_r+0x1c>
 8003c6c:	42a9      	cmp	r1, r5
 8003c6e:	d905      	bls.n	8003c7c <_malloc_r+0x28>
 8003c70:	230c      	movs	r3, #12
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	2600      	movs	r6, #0
 8003c76:	4630      	mov	r0, r6
 8003c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d50 <_malloc_r+0xfc>
 8003c80:	f000 f868 	bl	8003d54 <__malloc_lock>
 8003c84:	f8d8 3000 	ldr.w	r3, [r8]
 8003c88:	461c      	mov	r4, r3
 8003c8a:	bb5c      	cbnz	r4, 8003ce4 <_malloc_r+0x90>
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4638      	mov	r0, r7
 8003c90:	f7ff ffc0 	bl	8003c14 <sbrk_aligned>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	4604      	mov	r4, r0
 8003c98:	d155      	bne.n	8003d46 <_malloc_r+0xf2>
 8003c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8003c9e:	4626      	mov	r6, r4
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	d145      	bne.n	8003d30 <_malloc_r+0xdc>
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d048      	beq.n	8003d3a <_malloc_r+0xe6>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	4631      	mov	r1, r6
 8003cac:	4638      	mov	r0, r7
 8003cae:	eb04 0903 	add.w	r9, r4, r3
 8003cb2:	f000 fb5d 	bl	8004370 <_sbrk_r>
 8003cb6:	4581      	cmp	r9, r0
 8003cb8:	d13f      	bne.n	8003d3a <_malloc_r+0xe6>
 8003cba:	6821      	ldr	r1, [r4, #0]
 8003cbc:	1a6d      	subs	r5, r5, r1
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f7ff ffa7 	bl	8003c14 <sbrk_aligned>
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d037      	beq.n	8003d3a <_malloc_r+0xe6>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	442b      	add	r3, r5
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d038      	beq.n	8003d4a <_malloc_r+0xf6>
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	42a2      	cmp	r2, r4
 8003cdc:	d12b      	bne.n	8003d36 <_malloc_r+0xe2>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	e00f      	b.n	8003d04 <_malloc_r+0xb0>
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	1b52      	subs	r2, r2, r5
 8003ce8:	d41f      	bmi.n	8003d2a <_malloc_r+0xd6>
 8003cea:	2a0b      	cmp	r2, #11
 8003cec:	d917      	bls.n	8003d1e <_malloc_r+0xca>
 8003cee:	1961      	adds	r1, r4, r5
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	6025      	str	r5, [r4, #0]
 8003cf4:	bf18      	it	ne
 8003cf6:	6059      	strne	r1, [r3, #4]
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	bf08      	it	eq
 8003cfc:	f8c8 1000 	streq.w	r1, [r8]
 8003d00:	5162      	str	r2, [r4, r5]
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	4638      	mov	r0, r7
 8003d06:	f104 060b 	add.w	r6, r4, #11
 8003d0a:	f000 f829 	bl	8003d60 <__malloc_unlock>
 8003d0e:	f026 0607 	bic.w	r6, r6, #7
 8003d12:	1d23      	adds	r3, r4, #4
 8003d14:	1af2      	subs	r2, r6, r3
 8003d16:	d0ae      	beq.n	8003c76 <_malloc_r+0x22>
 8003d18:	1b9b      	subs	r3, r3, r6
 8003d1a:	50a3      	str	r3, [r4, r2]
 8003d1c:	e7ab      	b.n	8003c76 <_malloc_r+0x22>
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	6862      	ldr	r2, [r4, #4]
 8003d22:	d1dd      	bne.n	8003ce0 <_malloc_r+0x8c>
 8003d24:	f8c8 2000 	str.w	r2, [r8]
 8003d28:	e7ec      	b.n	8003d04 <_malloc_r+0xb0>
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	6864      	ldr	r4, [r4, #4]
 8003d2e:	e7ac      	b.n	8003c8a <_malloc_r+0x36>
 8003d30:	4634      	mov	r4, r6
 8003d32:	6876      	ldr	r6, [r6, #4]
 8003d34:	e7b4      	b.n	8003ca0 <_malloc_r+0x4c>
 8003d36:	4613      	mov	r3, r2
 8003d38:	e7cc      	b.n	8003cd4 <_malloc_r+0x80>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f000 f80e 	bl	8003d60 <__malloc_unlock>
 8003d44:	e797      	b.n	8003c76 <_malloc_r+0x22>
 8003d46:	6025      	str	r5, [r4, #0]
 8003d48:	e7dc      	b.n	8003d04 <_malloc_r+0xb0>
 8003d4a:	605b      	str	r3, [r3, #4]
 8003d4c:	deff      	udf	#255	; 0xff
 8003d4e:	bf00      	nop
 8003d50:	20000d60 	.word	0x20000d60

08003d54 <__malloc_lock>:
 8003d54:	4801      	ldr	r0, [pc, #4]	; (8003d5c <__malloc_lock+0x8>)
 8003d56:	f7ff bf0f 	b.w	8003b78 <__retarget_lock_acquire_recursive>
 8003d5a:	bf00      	nop
 8003d5c:	20000d5c 	.word	0x20000d5c

08003d60 <__malloc_unlock>:
 8003d60:	4801      	ldr	r0, [pc, #4]	; (8003d68 <__malloc_unlock+0x8>)
 8003d62:	f7ff bf0a 	b.w	8003b7a <__retarget_lock_release_recursive>
 8003d66:	bf00      	nop
 8003d68:	20000d5c 	.word	0x20000d5c

08003d6c <__ssputs_r>:
 8003d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d70:	688e      	ldr	r6, [r1, #8]
 8003d72:	461f      	mov	r7, r3
 8003d74:	42be      	cmp	r6, r7
 8003d76:	680b      	ldr	r3, [r1, #0]
 8003d78:	4682      	mov	sl, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	4690      	mov	r8, r2
 8003d7e:	d82c      	bhi.n	8003dda <__ssputs_r+0x6e>
 8003d80:	898a      	ldrh	r2, [r1, #12]
 8003d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d86:	d026      	beq.n	8003dd6 <__ssputs_r+0x6a>
 8003d88:	6965      	ldr	r5, [r4, #20]
 8003d8a:	6909      	ldr	r1, [r1, #16]
 8003d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d90:	eba3 0901 	sub.w	r9, r3, r1
 8003d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d98:	1c7b      	adds	r3, r7, #1
 8003d9a:	444b      	add	r3, r9
 8003d9c:	106d      	asrs	r5, r5, #1
 8003d9e:	429d      	cmp	r5, r3
 8003da0:	bf38      	it	cc
 8003da2:	461d      	movcc	r5, r3
 8003da4:	0553      	lsls	r3, r2, #21
 8003da6:	d527      	bpl.n	8003df8 <__ssputs_r+0x8c>
 8003da8:	4629      	mov	r1, r5
 8003daa:	f7ff ff53 	bl	8003c54 <_malloc_r>
 8003dae:	4606      	mov	r6, r0
 8003db0:	b360      	cbz	r0, 8003e0c <__ssputs_r+0xa0>
 8003db2:	6921      	ldr	r1, [r4, #16]
 8003db4:	464a      	mov	r2, r9
 8003db6:	f000 faeb 	bl	8004390 <memcpy>
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	6126      	str	r6, [r4, #16]
 8003dc8:	6165      	str	r5, [r4, #20]
 8003dca:	444e      	add	r6, r9
 8003dcc:	eba5 0509 	sub.w	r5, r5, r9
 8003dd0:	6026      	str	r6, [r4, #0]
 8003dd2:	60a5      	str	r5, [r4, #8]
 8003dd4:	463e      	mov	r6, r7
 8003dd6:	42be      	cmp	r6, r7
 8003dd8:	d900      	bls.n	8003ddc <__ssputs_r+0x70>
 8003dda:	463e      	mov	r6, r7
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	4632      	mov	r2, r6
 8003de0:	4641      	mov	r1, r8
 8003de2:	f000 faab 	bl	800433c <memmove>
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	1b9b      	subs	r3, r3, r6
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	4433      	add	r3, r6
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	2000      	movs	r0, #0
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	462a      	mov	r2, r5
 8003dfa:	f000 fad7 	bl	80043ac <_realloc_r>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1e0      	bne.n	8003dc6 <__ssputs_r+0x5a>
 8003e04:	6921      	ldr	r1, [r4, #16]
 8003e06:	4650      	mov	r0, sl
 8003e08:	f7ff feb8 	bl	8003b7c <_free_r>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	f8ca 3000 	str.w	r3, [sl]
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1e:	e7e9      	b.n	8003df4 <__ssputs_r+0x88>

08003e20 <_svfiprintf_r>:
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e24:	4698      	mov	r8, r3
 8003e26:	898b      	ldrh	r3, [r1, #12]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	b09d      	sub	sp, #116	; 0x74
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	460d      	mov	r5, r1
 8003e30:	4614      	mov	r4, r2
 8003e32:	d50e      	bpl.n	8003e52 <_svfiprintf_r+0x32>
 8003e34:	690b      	ldr	r3, [r1, #16]
 8003e36:	b963      	cbnz	r3, 8003e52 <_svfiprintf_r+0x32>
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	f7ff ff0b 	bl	8003c54 <_malloc_r>
 8003e3e:	6028      	str	r0, [r5, #0]
 8003e40:	6128      	str	r0, [r5, #16]
 8003e42:	b920      	cbnz	r0, 8003e4e <_svfiprintf_r+0x2e>
 8003e44:	230c      	movs	r3, #12
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	e0d0      	b.n	8003ff0 <_svfiprintf_r+0x1d0>
 8003e4e:	2340      	movs	r3, #64	; 0x40
 8003e50:	616b      	str	r3, [r5, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9309      	str	r3, [sp, #36]	; 0x24
 8003e56:	2320      	movs	r3, #32
 8003e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e60:	2330      	movs	r3, #48	; 0x30
 8003e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004008 <_svfiprintf_r+0x1e8>
 8003e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e6a:	f04f 0901 	mov.w	r9, #1
 8003e6e:	4623      	mov	r3, r4
 8003e70:	469a      	mov	sl, r3
 8003e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e76:	b10a      	cbz	r2, 8003e7c <_svfiprintf_r+0x5c>
 8003e78:	2a25      	cmp	r2, #37	; 0x25
 8003e7a:	d1f9      	bne.n	8003e70 <_svfiprintf_r+0x50>
 8003e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e80:	d00b      	beq.n	8003e9a <_svfiprintf_r+0x7a>
 8003e82:	465b      	mov	r3, fp
 8003e84:	4622      	mov	r2, r4
 8003e86:	4629      	mov	r1, r5
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f7ff ff6f 	bl	8003d6c <__ssputs_r>
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f000 80a9 	beq.w	8003fe6 <_svfiprintf_r+0x1c6>
 8003e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e96:	445a      	add	r2, fp
 8003e98:	9209      	str	r2, [sp, #36]	; 0x24
 8003e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80a1 	beq.w	8003fe6 <_svfiprintf_r+0x1c6>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eae:	f10a 0a01 	add.w	sl, sl, #1
 8003eb2:	9304      	str	r3, [sp, #16]
 8003eb4:	9307      	str	r3, [sp, #28]
 8003eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eba:	931a      	str	r3, [sp, #104]	; 0x68
 8003ebc:	4654      	mov	r4, sl
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec4:	4850      	ldr	r0, [pc, #320]	; (8004008 <_svfiprintf_r+0x1e8>)
 8003ec6:	f7fc f99b 	bl	8000200 <memchr>
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	b9d8      	cbnz	r0, 8003f06 <_svfiprintf_r+0xe6>
 8003ece:	06d0      	lsls	r0, r2, #27
 8003ed0:	bf44      	itt	mi
 8003ed2:	2320      	movmi	r3, #32
 8003ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed8:	0711      	lsls	r1, r2, #28
 8003eda:	bf44      	itt	mi
 8003edc:	232b      	movmi	r3, #43	; 0x2b
 8003ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee8:	d015      	beq.n	8003f16 <_svfiprintf_r+0xf6>
 8003eea:	9a07      	ldr	r2, [sp, #28]
 8003eec:	4654      	mov	r4, sl
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f04f 0c0a 	mov.w	ip, #10
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003efa:	3b30      	subs	r3, #48	; 0x30
 8003efc:	2b09      	cmp	r3, #9
 8003efe:	d94d      	bls.n	8003f9c <_svfiprintf_r+0x17c>
 8003f00:	b1b0      	cbz	r0, 8003f30 <_svfiprintf_r+0x110>
 8003f02:	9207      	str	r2, [sp, #28]
 8003f04:	e014      	b.n	8003f30 <_svfiprintf_r+0x110>
 8003f06:	eba0 0308 	sub.w	r3, r0, r8
 8003f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	9304      	str	r3, [sp, #16]
 8003f12:	46a2      	mov	sl, r4
 8003f14:	e7d2      	b.n	8003ebc <_svfiprintf_r+0x9c>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9103      	str	r1, [sp, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bfbb      	ittet	lt
 8003f22:	425b      	neglt	r3, r3
 8003f24:	f042 0202 	orrlt.w	r2, r2, #2
 8003f28:	9307      	strge	r3, [sp, #28]
 8003f2a:	9307      	strlt	r3, [sp, #28]
 8003f2c:	bfb8      	it	lt
 8003f2e:	9204      	strlt	r2, [sp, #16]
 8003f30:	7823      	ldrb	r3, [r4, #0]
 8003f32:	2b2e      	cmp	r3, #46	; 0x2e
 8003f34:	d10c      	bne.n	8003f50 <_svfiprintf_r+0x130>
 8003f36:	7863      	ldrb	r3, [r4, #1]
 8003f38:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3a:	d134      	bne.n	8003fa6 <_svfiprintf_r+0x186>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9203      	str	r2, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfb8      	it	lt
 8003f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f4c:	3402      	adds	r4, #2
 8003f4e:	9305      	str	r3, [sp, #20]
 8003f50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004018 <_svfiprintf_r+0x1f8>
 8003f54:	7821      	ldrb	r1, [r4, #0]
 8003f56:	2203      	movs	r2, #3
 8003f58:	4650      	mov	r0, sl
 8003f5a:	f7fc f951 	bl	8000200 <memchr>
 8003f5e:	b138      	cbz	r0, 8003f70 <_svfiprintf_r+0x150>
 8003f60:	9b04      	ldr	r3, [sp, #16]
 8003f62:	eba0 000a 	sub.w	r0, r0, sl
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	4082      	lsls	r2, r0
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	3401      	adds	r4, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f74:	4825      	ldr	r0, [pc, #148]	; (800400c <_svfiprintf_r+0x1ec>)
 8003f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f7a:	2206      	movs	r2, #6
 8003f7c:	f7fc f940 	bl	8000200 <memchr>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d038      	beq.n	8003ff6 <_svfiprintf_r+0x1d6>
 8003f84:	4b22      	ldr	r3, [pc, #136]	; (8004010 <_svfiprintf_r+0x1f0>)
 8003f86:	bb1b      	cbnz	r3, 8003fd0 <_svfiprintf_r+0x1b0>
 8003f88:	9b03      	ldr	r3, [sp, #12]
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	f023 0307 	bic.w	r3, r3, #7
 8003f90:	3308      	adds	r3, #8
 8003f92:	9303      	str	r3, [sp, #12]
 8003f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f96:	4433      	add	r3, r6
 8003f98:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9a:	e768      	b.n	8003e6e <_svfiprintf_r+0x4e>
 8003f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	e7a6      	b.n	8003ef4 <_svfiprintf_r+0xd4>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	3401      	adds	r4, #1
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 0c0a 	mov.w	ip, #10
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb8:	3a30      	subs	r2, #48	; 0x30
 8003fba:	2a09      	cmp	r2, #9
 8003fbc:	d903      	bls.n	8003fc6 <_svfiprintf_r+0x1a6>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0c6      	beq.n	8003f50 <_svfiprintf_r+0x130>
 8003fc2:	9105      	str	r1, [sp, #20]
 8003fc4:	e7c4      	b.n	8003f50 <_svfiprintf_r+0x130>
 8003fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fca:	4604      	mov	r4, r0
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e7f0      	b.n	8003fb2 <_svfiprintf_r+0x192>
 8003fd0:	ab03      	add	r3, sp, #12
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <_svfiprintf_r+0x1f4>)
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f3af 8000 	nop.w
 8003fe0:	1c42      	adds	r2, r0, #1
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	d1d6      	bne.n	8003f94 <_svfiprintf_r+0x174>
 8003fe6:	89ab      	ldrh	r3, [r5, #12]
 8003fe8:	065b      	lsls	r3, r3, #25
 8003fea:	f53f af2d 	bmi.w	8003e48 <_svfiprintf_r+0x28>
 8003fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff0:	b01d      	add	sp, #116	; 0x74
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	ab03      	add	r3, sp, #12
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <_svfiprintf_r+0x1f4>)
 8003ffe:	a904      	add	r1, sp, #16
 8004000:	4638      	mov	r0, r7
 8004002:	f000 f879 	bl	80040f8 <_printf_i>
 8004006:	e7eb      	b.n	8003fe0 <_svfiprintf_r+0x1c0>
 8004008:	08004468 	.word	0x08004468
 800400c:	08004472 	.word	0x08004472
 8004010:	00000000 	.word	0x00000000
 8004014:	08003d6d 	.word	0x08003d6d
 8004018:	0800446e 	.word	0x0800446e

0800401c <_printf_common>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	4616      	mov	r6, r2
 8004022:	4699      	mov	r9, r3
 8004024:	688a      	ldr	r2, [r1, #8]
 8004026:	690b      	ldr	r3, [r1, #16]
 8004028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800402c:	4293      	cmp	r3, r2
 800402e:	bfb8      	it	lt
 8004030:	4613      	movlt	r3, r2
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004038:	4607      	mov	r7, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b10a      	cbz	r2, 8004042 <_printf_common+0x26>
 800403e:	3301      	adds	r3, #1
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	0699      	lsls	r1, r3, #26
 8004046:	bf42      	ittt	mi
 8004048:	6833      	ldrmi	r3, [r6, #0]
 800404a:	3302      	addmi	r3, #2
 800404c:	6033      	strmi	r3, [r6, #0]
 800404e:	6825      	ldr	r5, [r4, #0]
 8004050:	f015 0506 	ands.w	r5, r5, #6
 8004054:	d106      	bne.n	8004064 <_printf_common+0x48>
 8004056:	f104 0a19 	add.w	sl, r4, #25
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	6832      	ldr	r2, [r6, #0]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	42ab      	cmp	r3, r5
 8004062:	dc26      	bgt.n	80040b2 <_printf_common+0x96>
 8004064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004068:	1e13      	subs	r3, r2, #0
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	bf18      	it	ne
 800406e:	2301      	movne	r3, #1
 8004070:	0692      	lsls	r2, r2, #26
 8004072:	d42b      	bmi.n	80040cc <_printf_common+0xb0>
 8004074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d01e      	beq.n	80040c0 <_printf_common+0xa4>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	6922      	ldr	r2, [r4, #16]
 8004086:	f003 0306 	and.w	r3, r3, #6
 800408a:	2b04      	cmp	r3, #4
 800408c:	bf02      	ittt	eq
 800408e:	68e5      	ldreq	r5, [r4, #12]
 8004090:	6833      	ldreq	r3, [r6, #0]
 8004092:	1aed      	subeq	r5, r5, r3
 8004094:	68a3      	ldr	r3, [r4, #8]
 8004096:	bf0c      	ite	eq
 8004098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800409c:	2500      	movne	r5, #0
 800409e:	4293      	cmp	r3, r2
 80040a0:	bfc4      	itt	gt
 80040a2:	1a9b      	subgt	r3, r3, r2
 80040a4:	18ed      	addgt	r5, r5, r3
 80040a6:	2600      	movs	r6, #0
 80040a8:	341a      	adds	r4, #26
 80040aa:	42b5      	cmp	r5, r6
 80040ac:	d11a      	bne.n	80040e4 <_printf_common+0xc8>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e008      	b.n	80040c4 <_printf_common+0xa8>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4652      	mov	r2, sl
 80040b6:	4649      	mov	r1, r9
 80040b8:	4638      	mov	r0, r7
 80040ba:	47c0      	blx	r8
 80040bc:	3001      	adds	r0, #1
 80040be:	d103      	bne.n	80040c8 <_printf_common+0xac>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	3501      	adds	r5, #1
 80040ca:	e7c6      	b.n	800405a <_printf_common+0x3e>
 80040cc:	18e1      	adds	r1, r4, r3
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	2030      	movs	r0, #48	; 0x30
 80040d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040d6:	4422      	add	r2, r4
 80040d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e0:	3302      	adds	r3, #2
 80040e2:	e7c7      	b.n	8004074 <_printf_common+0x58>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4622      	mov	r2, r4
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d0e6      	beq.n	80040c0 <_printf_common+0xa4>
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7d9      	b.n	80040aa <_printf_common+0x8e>
	...

080040f8 <_printf_i>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	7e0f      	ldrb	r7, [r1, #24]
 80040fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004100:	2f78      	cmp	r7, #120	; 0x78
 8004102:	4691      	mov	r9, r2
 8004104:	4680      	mov	r8, r0
 8004106:	460c      	mov	r4, r1
 8004108:	469a      	mov	sl, r3
 800410a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800410e:	d807      	bhi.n	8004120 <_printf_i+0x28>
 8004110:	2f62      	cmp	r7, #98	; 0x62
 8004112:	d80a      	bhi.n	800412a <_printf_i+0x32>
 8004114:	2f00      	cmp	r7, #0
 8004116:	f000 80d4 	beq.w	80042c2 <_printf_i+0x1ca>
 800411a:	2f58      	cmp	r7, #88	; 0x58
 800411c:	f000 80c0 	beq.w	80042a0 <_printf_i+0x1a8>
 8004120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004128:	e03a      	b.n	80041a0 <_printf_i+0xa8>
 800412a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800412e:	2b15      	cmp	r3, #21
 8004130:	d8f6      	bhi.n	8004120 <_printf_i+0x28>
 8004132:	a101      	add	r1, pc, #4	; (adr r1, 8004138 <_printf_i+0x40>)
 8004134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004138:	08004191 	.word	0x08004191
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004121 	.word	0x08004121
 8004144:	08004121 	.word	0x08004121
 8004148:	08004121 	.word	0x08004121
 800414c:	08004121 	.word	0x08004121
 8004150:	080041a5 	.word	0x080041a5
 8004154:	08004121 	.word	0x08004121
 8004158:	08004121 	.word	0x08004121
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	080042a9 	.word	0x080042a9
 8004168:	080041d1 	.word	0x080041d1
 800416c:	08004263 	.word	0x08004263
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042cb 	.word	0x080042cb
 800417c:	08004121 	.word	0x08004121
 8004180:	080041d1 	.word	0x080041d1
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	0800426b 	.word	0x0800426b
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	602a      	str	r2, [r5, #0]
 8004198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e09f      	b.n	80042e4 <_printf_i+0x1ec>
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	0607      	lsls	r7, r0, #24
 80041aa:	f103 0104 	add.w	r1, r3, #4
 80041ae:	6029      	str	r1, [r5, #0]
 80041b0:	d501      	bpl.n	80041b6 <_printf_i+0xbe>
 80041b2:	681e      	ldr	r6, [r3, #0]
 80041b4:	e003      	b.n	80041be <_printf_i+0xc6>
 80041b6:	0646      	lsls	r6, r0, #25
 80041b8:	d5fb      	bpl.n	80041b2 <_printf_i+0xba>
 80041ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041be:	2e00      	cmp	r6, #0
 80041c0:	da03      	bge.n	80041ca <_printf_i+0xd2>
 80041c2:	232d      	movs	r3, #45	; 0x2d
 80041c4:	4276      	negs	r6, r6
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	485a      	ldr	r0, [pc, #360]	; (8004334 <_printf_i+0x23c>)
 80041cc:	230a      	movs	r3, #10
 80041ce:	e012      	b.n	80041f6 <_printf_i+0xfe>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	1d19      	adds	r1, r3, #4
 80041d6:	6029      	str	r1, [r5, #0]
 80041d8:	0605      	lsls	r5, r0, #24
 80041da:	d501      	bpl.n	80041e0 <_printf_i+0xe8>
 80041dc:	681e      	ldr	r6, [r3, #0]
 80041de:	e002      	b.n	80041e6 <_printf_i+0xee>
 80041e0:	0641      	lsls	r1, r0, #25
 80041e2:	d5fb      	bpl.n	80041dc <_printf_i+0xe4>
 80041e4:	881e      	ldrh	r6, [r3, #0]
 80041e6:	4853      	ldr	r0, [pc, #332]	; (8004334 <_printf_i+0x23c>)
 80041e8:	2f6f      	cmp	r7, #111	; 0x6f
 80041ea:	bf0c      	ite	eq
 80041ec:	2308      	moveq	r3, #8
 80041ee:	230a      	movne	r3, #10
 80041f0:	2100      	movs	r1, #0
 80041f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041f6:	6865      	ldr	r5, [r4, #4]
 80041f8:	60a5      	str	r5, [r4, #8]
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	bfa2      	ittt	ge
 80041fe:	6821      	ldrge	r1, [r4, #0]
 8004200:	f021 0104 	bicge.w	r1, r1, #4
 8004204:	6021      	strge	r1, [r4, #0]
 8004206:	b90e      	cbnz	r6, 800420c <_printf_i+0x114>
 8004208:	2d00      	cmp	r5, #0
 800420a:	d04b      	beq.n	80042a4 <_printf_i+0x1ac>
 800420c:	4615      	mov	r5, r2
 800420e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004212:	fb03 6711 	mls	r7, r3, r1, r6
 8004216:	5dc7      	ldrb	r7, [r0, r7]
 8004218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800421c:	4637      	mov	r7, r6
 800421e:	42bb      	cmp	r3, r7
 8004220:	460e      	mov	r6, r1
 8004222:	d9f4      	bls.n	800420e <_printf_i+0x116>
 8004224:	2b08      	cmp	r3, #8
 8004226:	d10b      	bne.n	8004240 <_printf_i+0x148>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	07de      	lsls	r6, r3, #31
 800422c:	d508      	bpl.n	8004240 <_printf_i+0x148>
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	6861      	ldr	r1, [r4, #4]
 8004232:	4299      	cmp	r1, r3
 8004234:	bfde      	ittt	le
 8004236:	2330      	movle	r3, #48	; 0x30
 8004238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800423c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004240:	1b52      	subs	r2, r2, r5
 8004242:	6122      	str	r2, [r4, #16]
 8004244:	f8cd a000 	str.w	sl, [sp]
 8004248:	464b      	mov	r3, r9
 800424a:	aa03      	add	r2, sp, #12
 800424c:	4621      	mov	r1, r4
 800424e:	4640      	mov	r0, r8
 8004250:	f7ff fee4 	bl	800401c <_printf_common>
 8004254:	3001      	adds	r0, #1
 8004256:	d14a      	bne.n	80042ee <_printf_i+0x1f6>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	b004      	add	sp, #16
 800425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f043 0320 	orr.w	r3, r3, #32
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	4833      	ldr	r0, [pc, #204]	; (8004338 <_printf_i+0x240>)
 800426c:	2778      	movs	r7, #120	; 0x78
 800426e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6829      	ldr	r1, [r5, #0]
 8004276:	061f      	lsls	r7, r3, #24
 8004278:	f851 6b04 	ldr.w	r6, [r1], #4
 800427c:	d402      	bmi.n	8004284 <_printf_i+0x18c>
 800427e:	065f      	lsls	r7, r3, #25
 8004280:	bf48      	it	mi
 8004282:	b2b6      	uxthmi	r6, r6
 8004284:	07df      	lsls	r7, r3, #31
 8004286:	bf48      	it	mi
 8004288:	f043 0320 	orrmi.w	r3, r3, #32
 800428c:	6029      	str	r1, [r5, #0]
 800428e:	bf48      	it	mi
 8004290:	6023      	strmi	r3, [r4, #0]
 8004292:	b91e      	cbnz	r6, 800429c <_printf_i+0x1a4>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f023 0320 	bic.w	r3, r3, #32
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	2310      	movs	r3, #16
 800429e:	e7a7      	b.n	80041f0 <_printf_i+0xf8>
 80042a0:	4824      	ldr	r0, [pc, #144]	; (8004334 <_printf_i+0x23c>)
 80042a2:	e7e4      	b.n	800426e <_printf_i+0x176>
 80042a4:	4615      	mov	r5, r2
 80042a6:	e7bd      	b.n	8004224 <_printf_i+0x12c>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	6826      	ldr	r6, [r4, #0]
 80042ac:	6961      	ldr	r1, [r4, #20]
 80042ae:	1d18      	adds	r0, r3, #4
 80042b0:	6028      	str	r0, [r5, #0]
 80042b2:	0635      	lsls	r5, r6, #24
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	d501      	bpl.n	80042bc <_printf_i+0x1c4>
 80042b8:	6019      	str	r1, [r3, #0]
 80042ba:	e002      	b.n	80042c2 <_printf_i+0x1ca>
 80042bc:	0670      	lsls	r0, r6, #25
 80042be:	d5fb      	bpl.n	80042b8 <_printf_i+0x1c0>
 80042c0:	8019      	strh	r1, [r3, #0]
 80042c2:	2300      	movs	r3, #0
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	4615      	mov	r5, r2
 80042c8:	e7bc      	b.n	8004244 <_printf_i+0x14c>
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	602a      	str	r2, [r5, #0]
 80042d0:	681d      	ldr	r5, [r3, #0]
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	2100      	movs	r1, #0
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7fb ff92 	bl	8000200 <memchr>
 80042dc:	b108      	cbz	r0, 80042e2 <_printf_i+0x1ea>
 80042de:	1b40      	subs	r0, r0, r5
 80042e0:	6060      	str	r0, [r4, #4]
 80042e2:	6863      	ldr	r3, [r4, #4]
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	2300      	movs	r3, #0
 80042e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ec:	e7aa      	b.n	8004244 <_printf_i+0x14c>
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	462a      	mov	r2, r5
 80042f2:	4649      	mov	r1, r9
 80042f4:	4640      	mov	r0, r8
 80042f6:	47d0      	blx	sl
 80042f8:	3001      	adds	r0, #1
 80042fa:	d0ad      	beq.n	8004258 <_printf_i+0x160>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	079b      	lsls	r3, r3, #30
 8004300:	d413      	bmi.n	800432a <_printf_i+0x232>
 8004302:	68e0      	ldr	r0, [r4, #12]
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	4298      	cmp	r0, r3
 8004308:	bfb8      	it	lt
 800430a:	4618      	movlt	r0, r3
 800430c:	e7a6      	b.n	800425c <_printf_i+0x164>
 800430e:	2301      	movs	r3, #1
 8004310:	4632      	mov	r2, r6
 8004312:	4649      	mov	r1, r9
 8004314:	4640      	mov	r0, r8
 8004316:	47d0      	blx	sl
 8004318:	3001      	adds	r0, #1
 800431a:	d09d      	beq.n	8004258 <_printf_i+0x160>
 800431c:	3501      	adds	r5, #1
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	9903      	ldr	r1, [sp, #12]
 8004322:	1a5b      	subs	r3, r3, r1
 8004324:	42ab      	cmp	r3, r5
 8004326:	dcf2      	bgt.n	800430e <_printf_i+0x216>
 8004328:	e7eb      	b.n	8004302 <_printf_i+0x20a>
 800432a:	2500      	movs	r5, #0
 800432c:	f104 0619 	add.w	r6, r4, #25
 8004330:	e7f5      	b.n	800431e <_printf_i+0x226>
 8004332:	bf00      	nop
 8004334:	08004479 	.word	0x08004479
 8004338:	0800448a 	.word	0x0800448a

0800433c <memmove>:
 800433c:	4288      	cmp	r0, r1
 800433e:	b510      	push	{r4, lr}
 8004340:	eb01 0402 	add.w	r4, r1, r2
 8004344:	d902      	bls.n	800434c <memmove+0x10>
 8004346:	4284      	cmp	r4, r0
 8004348:	4623      	mov	r3, r4
 800434a:	d807      	bhi.n	800435c <memmove+0x20>
 800434c:	1e43      	subs	r3, r0, #1
 800434e:	42a1      	cmp	r1, r4
 8004350:	d008      	beq.n	8004364 <memmove+0x28>
 8004352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800435a:	e7f8      	b.n	800434e <memmove+0x12>
 800435c:	4402      	add	r2, r0
 800435e:	4601      	mov	r1, r0
 8004360:	428a      	cmp	r2, r1
 8004362:	d100      	bne.n	8004366 <memmove+0x2a>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800436a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800436e:	e7f7      	b.n	8004360 <memmove+0x24>

08004370 <_sbrk_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d06      	ldr	r5, [pc, #24]	; (800438c <_sbrk_r+0x1c>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	f7fd f906 	bl	800158c <_sbrk>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_sbrk_r+0x1a>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_sbrk_r+0x1a>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	20000d58 	.word	0x20000d58

08004390 <memcpy>:
 8004390:	440a      	add	r2, r1
 8004392:	4291      	cmp	r1, r2
 8004394:	f100 33ff 	add.w	r3, r0, #4294967295
 8004398:	d100      	bne.n	800439c <memcpy+0xc>
 800439a:	4770      	bx	lr
 800439c:	b510      	push	{r4, lr}
 800439e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a6:	4291      	cmp	r1, r2
 80043a8:	d1f9      	bne.n	800439e <memcpy+0xe>
 80043aa:	bd10      	pop	{r4, pc}

080043ac <_realloc_r>:
 80043ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	4680      	mov	r8, r0
 80043b2:	4614      	mov	r4, r2
 80043b4:	460e      	mov	r6, r1
 80043b6:	b921      	cbnz	r1, 80043c2 <_realloc_r+0x16>
 80043b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	4611      	mov	r1, r2
 80043be:	f7ff bc49 	b.w	8003c54 <_malloc_r>
 80043c2:	b92a      	cbnz	r2, 80043d0 <_realloc_r+0x24>
 80043c4:	f7ff fbda 	bl	8003b7c <_free_r>
 80043c8:	4625      	mov	r5, r4
 80043ca:	4628      	mov	r0, r5
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d0:	f000 f81b 	bl	800440a <_malloc_usable_size_r>
 80043d4:	4284      	cmp	r4, r0
 80043d6:	4607      	mov	r7, r0
 80043d8:	d802      	bhi.n	80043e0 <_realloc_r+0x34>
 80043da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043de:	d812      	bhi.n	8004406 <_realloc_r+0x5a>
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7ff fc36 	bl	8003c54 <_malloc_r>
 80043e8:	4605      	mov	r5, r0
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d0ed      	beq.n	80043ca <_realloc_r+0x1e>
 80043ee:	42bc      	cmp	r4, r7
 80043f0:	4622      	mov	r2, r4
 80043f2:	4631      	mov	r1, r6
 80043f4:	bf28      	it	cs
 80043f6:	463a      	movcs	r2, r7
 80043f8:	f7ff ffca 	bl	8004390 <memcpy>
 80043fc:	4631      	mov	r1, r6
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff fbbc 	bl	8003b7c <_free_r>
 8004404:	e7e1      	b.n	80043ca <_realloc_r+0x1e>
 8004406:	4635      	mov	r5, r6
 8004408:	e7df      	b.n	80043ca <_realloc_r+0x1e>

0800440a <_malloc_usable_size_r>:
 800440a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800440e:	1f18      	subs	r0, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfbc      	itt	lt
 8004414:	580b      	ldrlt	r3, [r1, r0]
 8004416:	18c0      	addlt	r0, r0, r3
 8004418:	4770      	bx	lr
	...

0800441c <_init>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr

08004428 <_fini>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr
